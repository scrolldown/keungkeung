/* ==========================================================================
   ÏúÑÏπò Í∏∞Î∞ò Ìè¨ÌÜ† ÏóÖÎ°úÎçî - Î©îÏù∏ JavaScript (ÏàòÏ†ïÎê®)
   ========================================================================== */

"use strict";

/* ==========================================================================
   Ï†ÑÏó≠ Î≥ÄÏàò
   ========================================================================== */
let uploadedFiles = [];
let map = null;
let userLocation = null;
let markers = [];
let infoWindow = null;
let pendingMarkers = []; // ÏßÄÎèÑ Î°úÎìú Ï†Ñ ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§Îì§

/* ==========================================================================
   ÏúÑÏπò Í¥ÄÎ¶¨Ïûê (LocationManager)
   ========================================================================== */
const LocationManager = {
    // ÌòÑÏû¨ ÏúÑÏπò Í∞ÄÏ†∏Ïò§Í∏∞
    getCurrentLocation() {
        if (!navigator.geolocation) {
            this.showLocationError(MESSAGES.LOCATION.UNSUPPORTED);
            return;
        }

        DEV_TOOLS.log('ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠ ÏãúÏûë');
        navigator.geolocation.getCurrentPosition(
            this.onLocationSuccess.bind(this),
            this.onLocationError.bind(this)
        );
    },

    // ÏúÑÏπò Ï†ïÎ≥¥ ÏÑ±Í≥µ ÏΩúÎ∞±
    onLocationSuccess(position) {
        userLocation = {
            lat: position.coords.latitude,
            lng: position.coords.longitude
        };
        
        DEV_TOOLS.log('ÏúÑÏπò Ï†ïÎ≥¥ ÌöçÎìù ÏÑ±Í≥µ', userLocation);
        this.updateLocationDisplay(userLocation);
        this.addUserLocationMarker(userLocation);
    },

    // ÏúÑÏπò Ï†ïÎ≥¥ Ïò§Î•ò ÏΩúÎ∞±
    onLocationError(error) {
        DEV_TOOLS.error('ÏúÑÏπò Ï†ïÎ≥¥ Ïò§Î•ò', error);
        this.showLocationError(MESSAGES.LOCATION.ERROR);
    },

    // ÏúÑÏπò Ï†ïÎ≥¥ ÌôîÎ©¥Ïóê ÌëúÏãú
    updateLocationDisplay(location) {
        const locationInfo = document.getElementById('locationInfo');
        const currentLocationSpan = document.getElementById('currentLocation');
        
        currentLocationSpan.textContent = `ÏúÑÎèÑ: ${location.lat.toFixed(6)}, Í≤ΩÎèÑ: ${location.lng.toFixed(6)}`;
        locationInfo.classList.add('active');
        DEV_TOOLS.log('ÏúÑÏπò Ï†ïÎ≥¥ UI ÏóÖÎç∞Ïù¥Ìä∏ ÏôÑÎ£å');
    },

    // ÏúÑÏπò Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú
    showLocationError(message) {
        document.getElementById('currentLocation').textContent = message;
        DEV_TOOLS.warn('ÏúÑÏπò Ïò§Î•ò Î©îÏãúÏßÄ ÌëúÏãú', message);
    },

    // ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ Ï∂îÍ∞Ä
    addUserLocationMarker(location) {
        if (!map) {
            DEV_TOOLS.warn('ÏßÄÎèÑÍ∞Ä ÏïÑÏßÅ Ï¥àÍ∏∞ÌôîÎêòÏßÄ ÏïäÏùå - ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ ÎåÄÍ∏∞');
            return;
        }

        map.setCenter(location);
        
        const userMarker = new google.maps.Marker({
            position: location,
            map: map,
            icon: {
                url: MARKER_ICONS.USER_LOCATION,
                scaledSize: new google.maps.Size(24, 24),
                anchor: new google.maps.Point(12, 12)
            },
            title: "ÎÇ¥ ÌòÑÏû¨ ÏúÑÏπò",
            zIndex: 1000
        });
        
        DEV_TOOLS.log('ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ ÏÉùÏÑ± ÏôÑÎ£å', location);
    }
};

/* ==========================================================================
   ÌÉ≠ Í¥ÄÎ¶¨Ïûê (TabManager)
   ========================================================================== */
const TabManager = {
    // ÌÉ≠ Ï†ÑÌôò
    showTab(tabName) {
        const tabs = document.querySelectorAll('.tab');
        const contents = document.querySelectorAll('.tab-content');
        
        // Î™®Îì† ÌÉ≠ ÎπÑÌôúÏÑ±Ìôî
        tabs.forEach(tab => tab.classList.remove('active'));
        contents.forEach(content => content.classList.remove('active'));
        
        // ÏÑ†ÌÉùÎêú ÌÉ≠ ÌôúÏÑ±Ìôî
        document.querySelector(`[onclick="TabManager.showTab('${tabName}')"]`).classList.add('active');
        document.getElementById(tabName + 'Tab').classList.add('active');
        
        DEV_TOOLS.log(`ÌÉ≠ Ï†ÑÌôò: ${tabName}`);
        
        // ÏßÄÎèÑ ÌÉ≠Ïùº Îïå ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
        if (tabName === 'map') {
            if (!map && typeof google !== 'undefined' && google.maps) {
                DEV_TOOLS.log('ÏßÄÎèÑ ÌÉ≠ ÌôúÏÑ±Ìôî - ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî ÏãúÏûë');
                MapController.init();
            } else if (map) {
                // ÏßÄÎèÑÍ∞Ä Ïù¥ÎØ∏ ÏûàÎã§Î©¥ ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§Îì§ ÌôïÏù∏
                MapController.processPendingMarkers();
            }
        }
    }
};

/* ==========================================================================
   ÏßÄÎèÑ Ïª®Ìä∏Î°§Îü¨ (MapController)
   ========================================================================== */
const MapController = {
    // ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî
    init() {
        DEV_TOOLS.log('ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî ÏãúÏûë');
        
        document.getElementById('mapLoading').style.display = 'none';
        document.getElementById('mapControls').style.display = 'flex';

        map = new google.maps.Map(document.getElementById('map'), {
            zoom: APP_CONFIG.DEFAULT_ZOOM,
            center: APP_CONFIG.DEFAULT_LOCATION,
            mapTypeControl: false,
            fullscreenControl: false,
            streetViewControl: false,
            styles: MAP_STYLES
        });

        infoWindow = new google.maps.InfoWindow();
        
        DEV_TOOLS.log('ÏßÄÎèÑ Í∞ùÏ≤¥ ÏÉùÏÑ± ÏôÑÎ£å');
        
        // ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÎßàÏª§ Ï∂îÍ∞Ä (ÏúÑÏπò Ï†ïÎ≥¥Í∞Ä ÏûàÎã§Î©¥)
        if (userLocation) {
            LocationManager.addUserLocationMarker(userLocation);
        } else {
            LocationManager.getCurrentLocation();
        }
        
        // ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§Îì§ Ï≤òÎ¶¨
        this.processPendingMarkers();
        
        DEV_TOOLS.log('ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    },

    // ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§Îì§ Ï≤òÎ¶¨
    processPendingMarkers() {
        if (!map || pendingMarkers.length === 0) {
            DEV_TOOLS.log('Ï≤òÎ¶¨Ìï† ÎåÄÍ∏∞ ÎßàÏª§ ÏóÜÏùå', {map: !!map, pendingCount: pendingMarkers.length});
            return;
        }
        
        DEV_TOOLS.log(`ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§ ${pendingMarkers.length}Í∞ú Ï≤òÎ¶¨ ÏãúÏûë`);
        
        pendingMarkers.forEach(markerData => {
            this.createMarkerOnMap(markerData.file, markerData.location);
        });
        
        // Ï≤òÎ¶¨ ÏôÑÎ£å ÌõÑ ÎåÄÍ∏∞ Î∞∞Ïó¥ Ï¥àÍ∏∞Ìôî
        pendingMarkers = [];
        DEV_TOOLS.log('Î™®Îì† ÎåÄÍ∏∞ ÎßàÏª§ Ï≤òÎ¶¨ ÏôÑÎ£å');
    },

    // ÎÇ¥ ÏúÑÏπòÎ°ú Ïù¥Îèô
    centerMap() {
        if (map && userLocation) {
            map.setCenter(userLocation);
            map.setZoom(APP_CONFIG.DEFAULT_ZOOM);
            DEV_TOOLS.log('ÏßÄÎèÑ Ï§ëÏã¨ÏùÑ ÏÇ¨Ïö©Ïûê ÏúÑÏπòÎ°ú Ïù¥Îèô');
        } else {
            DEV_TOOLS.warn('ÏßÄÎèÑ ÎòêÎäî ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÏóÜÏùå', {map: !!map, userLocation: !!userLocation});
        }
    },

    // Î™®Îì† ÏÇ¨ÏßÑÏù¥ Î≥¥Ïù¥ÎèÑÎ°ù ÏßÄÎèÑ Ï°∞Ï†ï
    showAllPhotos() {
        if (map && markers.length > 0) {
            const bounds = new google.maps.LatLngBounds();
            markers.forEach(marker => bounds.extend(marker.getPosition()));
            map.fitBounds(bounds);
            DEV_TOOLS.log(`Î™®Îì† ÏÇ¨ÏßÑ ÌëúÏãú (${markers.length}Í∞ú ÎßàÏª§)`);
        } else {
            DEV_TOOLS.warn('ÌëúÏãúÌï† ÏÇ¨ÏßÑÏù¥ ÏóÜÍ±∞ÎÇò ÏßÄÎèÑÍ∞Ä ÏóÜÏùå', {map: !!map, markerCount: markers.length});
            alert('ÏßÄÎèÑÎ•º Î®ºÏ†Ä Î°úÎìúÌïòÍ±∞ÎÇò ÏÇ¨ÏßÑÏùÑ ÏóÖÎ°úÎìúÌï¥Ï£ºÏÑ∏Ïöî.');
        }
    },

    // ÎèÑÏõÄÎßê ÌëúÏãú
    showHelp() {
        alert(MESSAGES.MAP.HELP);
    },

    // ÏÇ¨ÏßÑ ÎßàÏª§ Ï∂îÍ∞Ä (Í≥µÏö© Ïù∏ÌÑ∞ÌéòÏù¥Ïä§)
    addPhotoMarker(file, location) {
        DEV_TOOLS.log(`ÎßàÏª§ Ï∂îÍ∞Ä ÏöîÏ≤≠: ${file.name}`, location);
        
        if (!map) {
            // ÏßÄÎèÑÍ∞Ä ÏóÜÏúºÎ©¥ ÎåÄÍ∏∞ Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä
            pendingMarkers.push({ file, location });
            DEV_TOOLS.log('ÏßÄÎèÑ ÎØ∏Ï¥àÍ∏∞Ìôî - ÎßàÏª§Î•º ÎåÄÍ∏∞ Î∞∞Ïó¥Ïóê Ï∂îÍ∞Ä', {pendingCount: pendingMarkers.length});
            return;
        }
        
        // ÏßÄÎèÑÍ∞Ä ÏûàÏúºÎ©¥ Ï¶âÏãú ÏÉùÏÑ±
        this.createMarkerOnMap(file, location);
    },

    // Ïã§Ï†ú ÏßÄÎèÑÏóê ÎßàÏª§ ÏÉùÏÑ±
    createMarkerOnMap(file, location) {
        if (!map) {
            DEV_TOOLS.error('ÏßÄÎèÑ ÏóÜÏùå - ÎßàÏª§ ÏÉùÏÑ± Î∂àÍ∞Ä');
            return;
        }

        DEV_TOOLS.log(`ÏßÄÎèÑÏóê ÎßàÏª§ ÏÉùÏÑ±: ${file.name}`, location);

        const marker = new google.maps.Marker({
            position: location,
            map: map,
            icon: {
                url: MARKER_ICONS.PHOTO_LOCATION,
                scaledSize: new google.maps.Size(32, 32),
                anchor: new google.maps.Point(16, 16)
            },
            title: file.name,
            animation: google.maps.Animation.DROP,
            zIndex: 100
        });

        // ÎßàÏª§ Ïù¥Î≤§Ìä∏ Îì±Î°ù
        this.addMarkerEvents(marker, file, location);
        markers.push(marker);
        
        DEV_TOOLS.log(`ÎßàÏª§ ÏÉùÏÑ± ÏôÑÎ£å. Ï¥ù ÎßàÏª§ Ïàò: ${markers.length}`);
    },

    // ÎßàÏª§ Ïù¥Î≤§Ìä∏ Îì±Î°ù
    addMarkerEvents(marker, file, location) {
        // ÌÅ¥Î¶≠ - Ï†ïÎ≥¥Ï∞Ω ÌëúÏãú
        marker.addListener('click', () => {
            const infoContent = `
                <div class="marker-info-window">
                    <div class="marker-info-title">${file.name}</div>
                    <div class="marker-info-location">üìç ${location.lat.toFixed(4)}, ${location.lng.toFixed(4)}</div>
                    <button class="marker-info-btn" onclick="showPhotoFromMarker('${file.name}')">
                        üñºÔ∏è ÏÇ¨ÏßÑ Î≥¥Í∏∞
                    </button>
                </div>
            `;
            
            infoWindow.setContent(infoContent);
            infoWindow.open(map, marker);
            DEV_TOOLS.log(`ÎßàÏª§ ÌÅ¥Î¶≠: ${file.name}`);
        });

        // ÎçîÎ∏îÌÅ¥Î¶≠ - Î∞îÎ°ú ÏÇ¨ÏßÑ ÌåùÏóÖ
        marker.addListener('dblclick', () => {
            PhotoPopup.showByFileName(file.name);
            DEV_TOOLS.log(`ÎßàÏª§ ÎçîÎ∏îÌÅ¥Î¶≠: ${file.name}`);
        });

        // Ìò∏Î≤Ñ - Î∞îÏö¥Ïä§ Ïï†ÎãàÎ©îÏù¥ÏÖò
        marker.addListener('mouseover', () => {
            marker.setAnimation(google.maps.Animation.BOUNCE);
            setTimeout(() => marker.setAnimation(null), APP_CONFIG.BOUNCE_ANIMATION_DURATION);
        });
    }
};

/* ==========================================================================
   ÌååÏùº ÏóÖÎ°úÎçî (FileUploader)
   ========================================================================== */
const FileUploader = {
    // Ï¥àÍ∏∞Ìôî
    init() {
        this.setupEventListeners();
        DEV_TOOLS.log('ÌååÏùº ÏóÖÎ°úÎçî Ï¥àÍ∏∞Ìôî ÏôÑÎ£å');
    },

    // Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï
    setupEventListeners() {
        const uploadArea = document.getElementById('uploadArea');
        const fileInput = document.getElementById('fileInput');
        const cameraInput = document.getElementById('cameraInput');

        // ÎìúÎûòÍ∑∏ Ïï§ ÎìúÎ°≠ Ïù¥Î≤§Ìä∏
        uploadArea.addEventListener('dragover', this.onDragOver.bind(this));
        uploadArea.addEventListener('dragleave', this.onDragLeave.bind(this));
        uploadArea.addEventListener('drop', this.onDrop.bind(this));
        uploadArea.addEventListener('click', this.onAreaClick.bind(this));

        // ÌååÏùº ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏
        fileInput.addEventListener('change', this.onFileSelect.bind(this));
        cameraInput.addEventListener('change', this.onFileSelect.bind(this));
        
        DEV_TOOLS.log('ÌååÏùº ÏóÖÎ°úÎçî Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà ÏÑ§Ï†ï ÏôÑÎ£å');
    },

    // ÎìúÎûòÍ∑∏ Ïò§Î≤Ñ Ïù¥Î≤§Ìä∏
    onDragOver(e) {
        e.preventDefault();
        document.getElementById('uploadArea').classList.add('dragover');
    },

    // ÎìúÎûòÍ∑∏ Î¶¨Î∏å Ïù¥Î≤§Ìä∏
    onDragLeave() {
        document.getElementById('uploadArea').classList.remove('dragover');
    },

    // ÎìúÎ°≠ Ïù¥Î≤§Ìä∏
    onDrop(e) {
        e.preventDefault();
        document.getElementById('uploadArea').classList.remove('dragover');
        const files = Array.from(e.dataTransfer.files);
        DEV_TOOLS.log(`ÎìúÎ°≠Îêú ÌååÏùº Ïàò: ${files.length}`);
        this.handleFiles(files);
    },

    // ÏòÅÏó≠ ÌÅ¥Î¶≠ Ïù¥Î≤§Ìä∏
    onAreaClick(e) {
        if (!e.target.classList.contains('btn')) {
            document.getElementById('fileInput').click();
        }
    },

    // ÌååÏùº ÏÑ†ÌÉù Ïù¥Î≤§Ìä∏
    onFileSelect(e) {
        const files = Array.from(e.target.files);
        DEV_TOOLS.log(`ÏÑ†ÌÉùÎêú ÌååÏùº Ïàò: ${files.length}`);
        this.handleFiles(files);
    },

    // Ïπ¥Î©îÎùº Ïó¥Í∏∞
    openCamera() {
        document.getElementById('cameraInput').click();
        DEV_TOOLS.log('Ïπ¥Î©îÎùº Ïó¥Í∏∞');
    },

    // Í∞§Îü¨Î¶¨ Ïó¥Í∏∞
    openGallery() {
        document.getElementById('fileInput').click();
        DEV_TOOLS.log('Í∞§Îü¨Î¶¨ Ïó¥Í∏∞');
    },

    // ÌååÏùº Ï≤òÎ¶¨
    handleFiles(files) {
        DEV_TOOLS.log(`ÌååÏùº Ï≤òÎ¶¨ ÏãúÏûë: ${files.length}Í∞ú ÌååÏùº`);
        
        if (!userLocation) {
            DEV_TOOLS.log('ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÏóÜÏùå - ÏúÑÏπò Ï†ïÎ≥¥ ÏöîÏ≤≠');
            LocationManager.getCurrentLocation();
            setTimeout(() => this.handleFiles(files), 1000);
            return;
        }

        const validFiles = this.validateFiles(files);
        if (validFiles.length > 0) {
            DEV_TOOLS.log(`Ïú†Ìö®Ìïú ÌååÏùº ${validFiles.length}Í∞ú - ÏóÖÎ°úÎìú ÏãúÏûë`);
            this.simulateUpload(validFiles);
        }
    },

    // ÌååÏùº Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
    validateFiles(files) {
        return files.filter(file => {
            if (!file.type.startsWith('image/')) {
                alert(`${file.name}${MESSAGES.UPLOAD.INVALID_TYPE}`);
                DEV_TOOLS.warn(`ÏûòÎ™ªÎêú ÌååÏùº ÌòïÏãù: ${file.name} (${file.type})`);
                return false;
            }
            if (file.size > APP_CONFIG.MAX_FILE_SIZE) {
                alert(`${file.name}${MESSAGES.UPLOAD.TOO_LARGE}`);
                DEV_TOOLS.warn(`ÌååÏùº ÌÅ¨Í∏∞ Ï¥àÍ≥º: ${file.name} (${file.size} bytes)`);
                return false;
            }
            return true;
        });
    },

    // ÏóÖÎ°úÎìú ÏãúÎÆ¨Î†àÏù¥ÏÖò
    simulateUpload(files) {
        const progressElement = document.getElementById('uploadProgress');
        const progressFill = document.getElementById('progressFill');
        const progressText = document.getElementById('progressText');
        
        progressElement.style.display = 'block';
        let progress = 0;
        
        DEV_TOOLS.log('ÏóÖÎ°úÎìú ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏãúÏûë');
        
        const progressInterval = setInterval(() => {
            progress += Math.random() * 15;
            if (progress >= 100) {
                progress = 100;
                clearInterval(progressInterval);
                setTimeout(() => {
                    progressElement.style.display = 'none';
                    this.processFiles(files);
                    UIManager.showSuccessMessage();
                    DEV_TOOLS.log('ÏóÖÎ°úÎìú ÏãúÎÆ¨Î†àÏù¥ÏÖò ÏôÑÎ£å');
                }, 500);
            }
            
            progressFill.style.width = progress + '%';
            progressText.textContent = `${MESSAGES.UPLOAD.UPLOADING} ${Math.round(progress)}%`;
        }, 200);
    },

    // ÌååÏùº Ï≤òÎ¶¨ Î∞è ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±
    processFiles(files) {
        DEV_TOOLS.log(`ÌååÏùº Ï≤òÎ¶¨ ÏãúÏûë: ${files.length}Í∞ú`, files.map(f => f.name));
        
        files.forEach(file => {
            const fileId = Date.now() + Math.random();
            const location = this.generateLocation();
            
            const fileData = { id: fileId, file, location };
            uploadedFiles.push(fileData);
            
            DEV_TOOLS.log(`ÌååÏùº Îç∞Ïù¥ÌÑ∞ Ï∂îÍ∞Ä: ${file.name}`, {id: fileId, location});
            
            // ÏßÄÎèÑÏóê ÎßàÏª§ Ï∂îÍ∞Ä (ÏßÄÎèÑÍ∞Ä ÏóÜÏúºÎ©¥ ÎåÄÍ∏∞ Î∞∞Ïó¥Ïóê Ï∂îÍ∞ÄÎê®)
            MapController.addPhotoMarker(file, location);
            
            // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±
            this.createPreview(fileId, file, location);
        });
        
        DEV_TOOLS.log(`ÌååÏùº Ï≤òÎ¶¨ ÏôÑÎ£å. Ï¥ù ÌååÏùº Ïàò: ${uploadedFiles.length}, Ï¥ù ÎßàÏª§ Ïàò: ${markers.length}, ÎåÄÍ∏∞ ÎßàÏª§ Ïàò: ${pendingMarkers.length}`);
    },

    // ÏúÑÏπò ÏÉùÏÑ± (ÏïΩÍ∞ÑÏùò Ïò§ÌîÑÏÖã Ï∂îÍ∞Ä)
    generateLocation() {
        const location = userLocation ? {...userLocation} : {...APP_CONFIG.DEFAULT_LOCATION};
        location.lat += (Math.random() - 0.5) * APP_CONFIG.RANDOM_OFFSET;
        location.lng += (Math.random() - 0.5) * APP_CONFIG.RANDOM_OFFSET;
        return location;
    },

    // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±
    createPreview(fileId, file, location) {
        DEV_TOOLS.log(`ÎØ∏Î¶¨Î≥¥Í∏∞ ÏÉùÏÑ±: ${file.name} (ID: ${fileId})`);
        
        const reader = new FileReader();
        reader.onload = (e) => {
            const previewItem = UIManager.createPreviewItem(fileId, file, location, e.target.result);
            const previewArea = document.getElementById('previewArea');
            previewArea.appendChild(previewItem);
            DEV_TOOLS.log('ÎØ∏Î¶¨Î≥¥Í∏∞ DOMÏóê Ï∂îÍ∞Ä ÏôÑÎ£å');
        };
        reader.onerror = (e) => {
            DEV_TOOLS.error('ÌååÏùº ÏùΩÍ∏∞ Ïò§Î•ò', e);
        };
        reader.readAsDataURL(file);
    },

    // ÌååÏùº Ï†úÍ±∞
    removeFile(fileId) {
        DEV_TOOLS.log(`ÌååÏùº Ï†úÍ±∞ ÏãúÎèÑ: ID ${fileId}`);
        
        const fileIndex = uploadedFiles.findIndex(f => f.id === fileId);
        
        if (fileIndex !== -1) {
            const removedFile = uploadedFiles[fileIndex];
            
            // ÎßàÏª§ Ï†úÍ±∞
            const markerIndex = markers.findIndex(marker => marker.getTitle() === removedFile.file.name);
            if (markerIndex !== -1) {
                markers[markerIndex].setMap(null);
                markers.splice(markerIndex, 1);
                DEV_TOOLS.log(`ÎßàÏª§ Ï†úÍ±∞ ÏôÑÎ£å: ${removedFile.file.name}`);
            }
            
            // ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§ÏóêÏÑúÎèÑ Ï†úÍ±∞
            const pendingIndex = pendingMarkers.findIndex(p => p.file.name === removedFile.file.name);
            if (pendingIndex !== -1) {
                pendingMarkers.splice(pendingIndex, 1);
                DEV_TOOLS.log(`ÎåÄÍ∏∞ ÎßàÏª§ÏóêÏÑú Ï†úÍ±∞: ${removedFile.file.name}`);
            }
            
            // ÌååÏùº Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞
            uploadedFiles.splice(fileIndex, 1);
            DEV_TOOLS.log('ÌååÏùº Îç∞Ïù¥ÌÑ∞ Ï†úÍ±∞ ÏôÑÎ£å', removedFile);
        }
        
        // ÎØ∏Î¶¨Î≥¥Í∏∞ Ï†úÍ±∞
        const previewItems = document.getElementById('previewArea').children;
        for (let i = 0; i < previewItems.length; i++) {
            const removeBtn = previewItems[i].querySelector('.remove-btn');
            if (removeBtn && removeBtn.getAttribute('onclick').includes(fileId)) {
                previewItems[i].remove();
                DEV_TOOLS.log(`ÎØ∏Î¶¨Î≥¥Í∏∞ Ï†úÍ±∞ ÏôÑÎ£å: Ïù∏Îç±Ïä§ ${i}`);
                break;
            }
        }
        
        DEV_TOOLS.log(`ÌååÏùº Ï†úÍ±∞ ÏôÑÎ£å. ÎÇ®ÏùÄ ÌååÏùº: ${uploadedFiles.length}Í∞ú, ÎßàÏª§: ${markers.length}Í∞ú`);
    }
};

/* ==========================================================================
   ÏÇ¨ÏßÑ ÌåùÏóÖ (PhotoPopup)
   ========================================================================== */
const PhotoPopup = {
    // ÌååÏùºÎ™ÖÏúºÎ°ú ÌåùÏóÖ ÌëúÏãú
    showByFileName(fileName) {
        const fileData = uploadedFiles.find(f => f.file.name === fileName);
        if (fileData) {
            DEV_TOOLS.log(`ÌååÏùºÎ™ÖÏúºÎ°ú ÌåùÏóÖ ÌëúÏãú: ${fileName}`);
            this.show(fileData.file, fileData.location);
        } else {
            DEV_TOOLS.error(`ÌååÏùºÏùÑ Ï∞æÏùÑ Ïàò ÏóÜÏùå: ${fileName}`);
        }
    },

    // ÌåùÏóÖ ÌëúÏãú
    show(file, location) {
        let fileData;
        
        // ÌååÏùº Í∞ùÏ≤¥Î°ú Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
        if (typeof file === 'object') {
            fileData = uploadedFiles.find(f => f.file.name === file.name);
        } else {
            // ÌååÏùºÎ™ÖÏúºÎ°ú Îç∞Ïù¥ÌÑ∞ Ï∞æÍ∏∞
            fileData = uploadedFiles.find(f => f.file.name === file);
        }
        
        if (!fileData) {
            DEV_TOOLS.error('ÌååÏùº Îç∞Ïù¥ÌÑ∞Î•º Ï∞æÏùÑ Ïàò ÏóÜÏùå', file);
            return;
        }

        DEV_TOOLS.log(`ÏÇ¨ÏßÑ ÌåùÏóÖ ÌëúÏãú: ${fileData.file.name}`);

        // UI ÏöîÏÜå Í∞ÄÏ†∏Ïò§Í∏∞
        const popup = document.getElementById('photoPopup');
        const overlay = document.getElementById('photoPopupOverlay');
        const image = document.getElementById('popupImage');
        const title = document.getElementById('popupTitle');
        const size = document.getElementById('popupSize');
        const locationText = document.getElementById('popupLocation');
        const timeText = document.getElementById('popupTime');

        // Ï†ïÎ≥¥Ï∞Ω Îã´Í∏∞
        if (infoWindow) infoWindow.close();

        // Ïù¥ÎØ∏ÏßÄ ÏùΩÍ∏∞ Î∞è ÌëúÏãú
        const reader = new FileReader();
        reader.onload = (e) => {
            image.src = e.target.result;
            title.textContent = fileData.file.name;
            size.textContent = `ÌÅ¨Í∏∞: ${Utils.formatFileSize(fileData.file.size)}`;
            locationText.textContent = `ÏúÑÎèÑ: ${fileData.location.lat.toFixed(6)}, Í≤ΩÎèÑ: ${fileData.location.lng.toFixed(6)}`;
            timeText.textContent = `ÏóÖÎ°úÎìú: ${new Date().toLocaleString('ko-KR')}`;
            
            // ÌòÑÏû¨ Îç∞Ïù¥ÌÑ∞ Ï†ÄÏû•
            window.currentPhotoData = {
                file: fileData.file,
                location: fileData.location,
                dataUrl: e.target.result
            };
            
            // ÌåùÏóÖ ÌëúÏãú
            overlay.style.display = 'block';
            popup.style.display = 'block';
            DEV_TOOLS.log('ÌåùÏóÖ ÌëúÏãú ÏôÑÎ£å');
        };
        reader.readAsDataURL(fileData.file);
    },

    // ÌåùÏóÖ Îã´Í∏∞
    close() {
        document.getElementById('photoPopup').style.display = 'none';
        document.getElementById('photoPopupOverlay').style.display = 'none';
        window.currentPhotoData = null;
        DEV_TOOLS.log('ÏÇ¨ÏßÑ ÌåùÏóÖ Îã´Í∏∞');
    },

    // ÏÇ¨ÏßÑ Îã§Ïö¥Î°úÎìú
    downloadPhoto() {
        if (!window.currentPhotoData) return;
        
        const link = document.createElement('a');
        link.href = window.currentPhotoData.dataUrl;
        link.download = window.currentPhotoData.file.name;
        link.click();
        DEV_TOOLS.log(`ÏÇ¨ÏßÑ Îã§Ïö¥Î°úÎìú: ${window.currentPhotoData.file.name}`);
    },

    // ÏúÑÏπò Í≥µÏú†
    shareLocation() {
        if (!window.currentPhotoData) return;
        
        const location = window.currentPhotoData.location;
        const googleMapsUrl = `https://maps.google.com/?q=${location.lat},${location.lng}`;
        
        if (navigator.share) {
            navigator.share({
                title: MESSAGES.SHARE.SHARE_TITLE,
                text: `${window.currentPhotoData.file.name}${MESSAGES.SHARE.SHARE_TEXT}`,
                url: googleMapsUrl
            });
        } else {
            navigator.clipboard.writeText(googleMapsUrl).then(() => {
                alert(MESSAGES.SHARE.LOCATION_COPIED);
            });
        }
        DEV_TOOLS.log('ÏúÑÏπò Í≥µÏú† Ïã§Ìñâ');
    }
};

/* ==========================================================================
   UI Í¥ÄÎ¶¨Ïûê (UIManager)
   ========================================================================== */
const UIManager = {
    // ÏÑ±Í≥µ Î©îÏãúÏßÄ ÌëúÏãú
    showSuccessMessage() {
        const successMessage = document.getElementById('successMessage');
        successMessage.style.display = 'block';
        setTimeout(() => {
            successMessage.style.display = 'none';
        }, APP_CONFIG.SUCCESS_MESSAGE_DURATION);
    },

    // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏïÑÏù¥ÌÖú ÏÉùÏÑ±
    createPreviewItem(fileId, file, location, imageSrc) {
        const item = document.createElement('div');
        item.className = 'preview-item';
        item.innerHTML = `
            <img src="${imageSrc}" alt="${file.name}" class="preview-img" onclick="PhotoPopup.showByFileName('${file.name}')">
            <div class="preview-info">
                <div class="file-details">
                    <div class="file-name">${file.name}</div>
                    <div class="file-size">${Utils.formatFileSize(file.size)}</div>
                    <div class="file-location">üìç ÏúÑÎèÑ: ${location.lat.toFixed(6)}, Í≤ΩÎèÑ: ${location.lng.toFixed(6)}</div>
                </div>
                <button class="remove-btn" onclick="removeFileById(${fileId})" title="ÏÇ≠Ï†ú">√ó</button>
            </div>
        `;
        return item;
    }
};

/* ==========================================================================
   Ïú†Ìã∏Î¶¨Ìã∞ Ìï®Ïàò (Utils)
   ========================================================================== */
const Utils = {
    // ÌååÏùº ÌÅ¨Í∏∞ Ìè¨Îß∑ÌåÖ
    formatFileSize(bytes) {
        if (bytes === 0) return '0 Bytes';
        const k = 1024;
        const sizes = ['Bytes', 'KB', 'MB'];
        const i = Math.floor(Math.log(bytes) / Math.log(k));
        return parseFloat((bytes / Math.pow(k, i)).toFixed(2)) + ' ' + sizes[i];
    }
};

/* ==========================================================================
   Ïï± Ï¥àÍ∏∞Ìôî Î∞è Ïù¥Î≤§Ìä∏ Î¶¨Ïä§ÎÑà
   ========================================================================== */

// Ïï± Ï¥àÍ∏∞Ìôî Ìï®Ïàò (config.js Î°úÎìú ÌõÑ Ìò∏Ï∂úÎê®)
function initializeApp() {
    // config.js Î°úÎìú ÌôïÏù∏
    if (typeof APP_CONFIG === 'undefined' || typeof DEV_TOOLS === 'undefined') {
        console.error('ÏÑ§Ï†ïÏù¥ Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§. config.jsÎ•º ÌôïÏù∏Ìï¥Ï£ºÏÑ∏Ïöî.');
        return;
    }
    
    DEV_TOOLS.log('Ïï± Ï¥àÍ∏∞Ìôî ÏãúÏûë');
    
    // Ï†ÑÏó≠ Ìï®Ïàò ÎÖ∏Ï∂ú (HTML onclick Ïù¥Î≤§Ìä∏Ïö©)
    window.removeFileById = (fileId) => {
        FileUploader.removeFile(fileId);
    };

    window.showPhotoFromMarker = (fileName) => {
        PhotoPopup.showByFileName(fileName);
    };

    // Î™®ÎìàÎì§ Ï†ÑÏó≠ ÎÖ∏Ï∂ú
    window.TabManager = TabManager;
    window.MapController = MapController;
    window.FileUploader = FileUploader;
    window.PhotoPopup = PhotoPopup;

    // ÎîîÎ≤ÑÍπÖ Ìï®ÏàòÎì§ Ï†ÑÏó≠ ÎÖ∏Ï∂ú
    window.debugUploadedFiles = () => {
        console.log('=== üìä ÎîîÎ≤ÑÍ∑∏ Ï†ïÎ≥¥ ===');
        console.log('üìÅ ÏóÖÎ°úÎìúÎêú ÌååÏùº:', uploadedFiles);
        console.log('üìç ÎßàÏª§ Î∞∞Ïó¥:', markers);
        console.log('‚è≥ ÎåÄÍ∏∞ ÎßàÏª§ Î∞∞Ïó¥:', pendingMarkers);
        console.log('üåç ÏÇ¨Ïö©Ïûê ÏúÑÏπò:', userLocation);
        console.log('üó∫Ô∏è ÏßÄÎèÑ Í∞ùÏ≤¥:', map);
        console.log('‚öôÔ∏è Ïï± ÏÑ§Ï†ï:', APP_CONFIG);
        console.log('==================');
        
        // Ï∂îÍ∞Ä Î∂ÑÏÑù
        console.log('üìä Î∂ÑÏÑù:');
        console.log(`- ÏóÖÎ°úÎìúÎêú ÌååÏùº Ïàò: ${uploadedFiles.length}`);
        console.log(`- ÏßÄÎèÑÏùò ÎßàÏª§ Ïàò: ${markers.length}`);
        console.log(`- ÎåÄÍ∏∞ Ï§ëÏù∏ ÎßàÏª§ Ïàò: ${pendingMarkers.length}`);
        console.log(`- ÏßÄÎèÑ Ï¥àÍ∏∞Ìôî ÏÉÅÌÉú: ${map ? 'ÏôÑÎ£å' : 'ÎØ∏ÏôÑÎ£å'}`);
        console.log(`- ÏÇ¨Ïö©Ïûê ÏúÑÏπò ÌöçÎìù: ${userLocation ? 'ÏôÑÎ£å' : 'ÎØ∏ÏôÑÎ£å'}`);
        
        // Google Maps API ÏÉÅÌÉú
        console.log(`- Google Maps API: ${typeof google !== 'undefined' ? 'Î°úÎìúÎê®' : 'ÎØ∏Î°úÎìú'}`);
    };

    window.enableDebugMode = () => {
        APP_CONFIG.DEBUG_MODE = true;
        console.log('üîß ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÍ∞Ä ÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.');
        console.log('ÏÉÅÏÑ∏Ìïú Î°úÍ∑∏Î•º ÌôïÏù∏ÌïòÎ†§Î©¥ debugUploadedFiles()Î•º Ïã§ÌñâÌïòÏÑ∏Ïöî.');
    };

    window.disableDebugMode = () => {
        APP_CONFIG.DEBUG_MODE = false;
        console.log('üîß ÎîîÎ≤ÑÍ∑∏ Î™®ÎìúÍ∞Ä ÎπÑÌôúÏÑ±ÌôîÎêòÏóàÏäµÎãàÎã§.');
    };

    window.clearAllFiles = () => {
        if (confirm('Î™®Îì† ÏóÖÎ°úÎìúÎêú ÌååÏùºÏùÑ ÏÇ≠Ï†úÌïòÏãúÍ≤†ÏäµÎãàÍπå?')) {
            // Î™®Îì† ÎßàÏª§ Ï†úÍ±∞
            markers.forEach(marker => marker.setMap(null));
            markers = [];
            
            // ÎåÄÍ∏∞ ÎßàÏª§ Ï¥àÍ∏∞Ìôî
            pendingMarkers = [];
            
            // ÌååÏùº Îç∞Ïù¥ÌÑ∞ Ï¥àÍ∏∞Ìôî
            uploadedFiles = [];
            
            // ÎØ∏Î¶¨Î≥¥Í∏∞ ÏòÅÏó≠ Ï¥àÍ∏∞Ìôî
            document.getElementById('previewArea').innerHTML = '';
            
            DEV_TOOLS.log('Î™®Îì† ÌååÏùºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§');
            console.log('‚úÖ Î™®Îì† ÌååÏùºÏù¥ ÏÇ≠Ï†úÎêòÏóàÏäµÎãàÎã§.');
        }
    };

    window.forceMapInit = () => {
        if (typeof google !== 'undefined' && google.maps) {
            MapController.init();
            console.log('üó∫Ô∏è ÏßÄÎèÑÎ•º Í∞ïÏ†úÎ°ú Ï¥àÍ∏∞ÌôîÌñàÏäµÎãàÎã§.');
        } else {
            console.error('‚ùå Google Maps APIÍ∞Ä Î°úÎìúÎêòÏßÄ ÏïäÏïòÏäµÎãàÎã§.');
        }
    };

    window.testMarkerCreation = () => {
        if (!userLocation) {
            console.error('‚ùå ÏÇ¨Ïö©Ïûê ÏúÑÏπòÍ∞Ä ÏóÜÏäµÎãàÎã§. ÏúÑÏπò Í∂åÌïúÏùÑ ÌóàÏö©Ìï¥Ï£ºÏÑ∏Ïöî.');
            return;
        }
        
        // ÌÖåÏä§Ìä∏Ïö© Í∞ÄÏÉÅ ÌååÏùº
        const testFile = {
            name: 'test-photo.jpg',
            size: 1024 * 1024 // 1MB
        };
        
        const testLocation = {
            lat: userLocation.lat + 0.001,
            lng: userLocation.lng + 0.001
        };
        
        console.log('üß™ ÌÖåÏä§Ìä∏ ÎßàÏª§ ÏÉùÏÑ± Ï§ë...', testLocation);
        MapController.addPhotoMarker(testFile, testLocation);
        console.log('‚úÖ ÌÖåÏä§Ìä∏ ÎßàÏª§ ÏÉùÏÑ± ÏôÑÎ£å');
    };

    // Í∞úÎ∞úÏûê ÏΩòÏÜî ÎèÑÏö∞ÎØ∏ Î©îÏãúÏßÄ
    console.log(`
üöÄ ${APP_CONFIG.APP_NAME} v${APP_CONFIG.APP_VERSION}

üìã ÏÇ¨Ïö© Í∞ÄÎä•Ìïú ÎîîÎ≤ÑÍ∑∏ Î™ÖÎ†πÏñ¥:
‚Ä¢ debugUploadedFiles() - ÌòÑÏû¨ ÏÉÅÌÉú ÌôïÏù∏
‚Ä¢ enableDebugMode() - ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÌôúÏÑ±Ìôî  
‚Ä¢ disableDebugMode() - ÎîîÎ≤ÑÍ∑∏ Î™®Îìú ÎπÑÌôúÏÑ±Ìôî
‚Ä¢ clearAllFiles() - Î™®Îì† ÌååÏùº ÏÇ≠Ï†ú
‚Ä¢ forceMapInit() - ÏßÄÎèÑ Í∞ïÏ†ú Ï¥àÍ∏∞Ìôî
‚Ä¢ testMarkerCreation() - ÌÖåÏä§Ìä∏ ÎßàÏª§ ÏÉùÏÑ±

üîß Í∞úÎ∞úÏûê Ï†ïÎ≥¥:
‚Ä¢ GitHub: keungkeung
‚Ä¢ Î∞∞Ìè¨: Vercel
    `);
    
    LocationManager.getCurrentLocation();
    FileUploader.init();
    DEV_TOOLS.log(`${APP_CONFIG.APP_NAME} v${APP_CONFIG.APP_VERSION} Ï¥àÍ∏∞Ìôî ÏôÑÎ£å`);
}

// DOMÏù¥ Ïù¥ÎØ∏ Î°úÎìúÎêòÏóàÎã§Î©¥ Ï¶âÏãú Ï¥àÍ∏∞Ìôî, ÏïÑÎãàÎ©¥ ÎåÄÍ∏∞
if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', initializeApp);
} else {
    // config.jsÍ∞Ä Î°úÎìúÎêòÏóàÎäîÏßÄ ÌôïÏù∏ ÌõÑ Ï¥àÍ∏∞Ìôî
    if (typeof APP_CONFIG !== 'undefined') {
        initializeApp();
    } else {
        // config.js Î°úÎìú ÎåÄÍ∏∞
        let configCheckInterval = setInterval(() => {
            if (typeof APP_CONFIG !== 'undefined') {
                clearInterval(configCheckInterval);
                initializeApp();
            }
        }, 50);
    }
}

// ESC ÌÇ§Î°ú ÌåùÏóÖ Îã´Í∏∞
document.addEventListener('keydown', (e) => {
    if (e.key === 'Escape') {
        if (typeof PhotoPopup !== 'undefined') {
            PhotoPopup.close();
        }
    }
});
